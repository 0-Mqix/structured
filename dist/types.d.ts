import Structured, { type StructuredType, type Property, type InferOutputType } from "./structured";
export declare const uint8: StructuredType<number>;
export declare const int8: StructuredType<number>;
export declare const uint16: StructuredType<number>;
export declare const int16: StructuredType<number>;
export declare const uint32: StructuredType<number>;
export declare const int32: StructuredType<number>;
export declare const float32: StructuredType<number>;
export declare const float64: StructuredType<number>;
export declare const int64: StructuredType<bigint>;
export declare const uint64: StructuredType<bigint>;
export declare const double: StructuredType<number>;
export declare const long: StructuredType<bigint>;
export declare const bool: StructuredType<boolean>;
export declare function string(size: number): StructuredType<string>;
export declare function array<const T extends StructuredType<any> | Structured<any> | readonly Property[]>(size: number, type: T, littleEndian: boolean, omitEmptyOnRead?: boolean): StructuredType<InferOutputType<T>[]>;
export declare function union<const T extends readonly Property[]>(union: T): StructuredType<Partial<InferOutputType<T>>>;
